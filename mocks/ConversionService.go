// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mhaqiw/game-currency/domain"
	mock "github.com/stretchr/testify/mock"
)

// ConversionService is an autogenerated mock type for the ConversionService type
type ConversionService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request
func (_m *ConversionService) Create(ctx context.Context, request domain.ConversionInsertRequestPayload) (domain.ConversionInsertResponsePayload, error) {
	ret := _m.Called(ctx, request)

	var r0 domain.ConversionInsertResponsePayload
	if rf, ok := ret.Get(0).(func(context.Context, domain.ConversionInsertRequestPayload) domain.ConversionInsertResponsePayload); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(domain.ConversionInsertResponsePayload)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ConversionInsertRequestPayload) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConvertedCurrency provides a mock function with given fields: ctx, request
func (_m *ConversionService) GetConvertedCurrency(ctx context.Context, request domain.ConvertedCurrencyRequest) (domain.ConvertedCurrencyResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 domain.ConvertedCurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.ConvertedCurrencyRequest) domain.ConvertedCurrencyResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(domain.ConvertedCurrencyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ConvertedCurrencyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
