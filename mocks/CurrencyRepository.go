// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mhaqiw/game-currency/domain"
	mock "github.com/stretchr/testify/mock"
)

// CurrencyRepository is an autogenerated mock type for the CurrencyRepository type
type CurrencyRepository struct {
	mock.Mock
}

// CheckIsExistByID provides a mock function with given fields: ctx, id
func (_m *CurrencyRepository) CheckIsExistByID(ctx context.Context, id int64) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckIsExistByName provides a mock function with given fields: ctx, orgName
func (_m *CurrencyRepository) CheckIsExistByName(ctx context.Context, orgName string) (bool, error) {
	ret := _m.Called(ctx, orgName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, orgName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, comment
func (_m *CurrencyRepository) Create(ctx context.Context, comment *domain.Currency) error {
	ret := _m.Called(ctx, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Currency) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *CurrencyRepository) GetAll(ctx context.Context) ([]domain.Currency, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Currency
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Currency); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Currency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
